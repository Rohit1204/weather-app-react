{"version":3,"sources":["responsive.js","components/SearchCity/Search.style.js","components/SearchCity/index.js","App.js","serviceWorker.js","index.js"],"names":["size","device","mobileS","mobileM","mobileL","tablet","laptop","laptopL","desktop","desktopL","SearchInput","styled","input","SearchIcon","span","SearchBar","form","showResult","SearchCity","submit","value","change","onSubmit","type","placeholder","onChange","AppTitle","h1","showLabel","secondary","WeatherWrapper","div","App","state","weatherInfo","error","handleInputChange","e","setState","target","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"mTAAMA,EAEO,QAFPA,EAGO,QAHPA,EAIM,QAJNA,EAKM,SALNA,EAMO,SANPA,EAOO,SAcIC,EAXA,CACbC,QAAQ,eAAD,OAVE,QAUF,KACPC,QAAQ,eAAD,OAAiBH,EAAjB,KACPI,QAAQ,eAAD,OAAiBJ,EAAjB,KACPK,OAAO,eAAD,OAAiBL,EAAjB,KACNM,OAAO,eAAD,OAAiBN,EAAjB,KACNO,QAAQ,eAAD,OAAiBP,EAAjB,KACPQ,QAAQ,eAAD,OAAiBR,EAAjB,KACPS,SAAS,eAAD,OAAiBT,EAAjB,M,6/BCdL,IAAMU,EAAcC,IAAOC,MAAV,IAebX,EAAOI,OAGPJ,EAAOK,QAMLO,EAAaF,IAAOG,KAAV,IAUZb,EAAOI,OAKPJ,EAAOK,Q,qQCpClB,IAAMS,EAAYJ,IAAOK,KAAV,KACN,qBAAGC,WAA+B,KAAO,QAKvChB,EAAOM,QAGPN,EAAOO,SA0BHU,EApBW,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,OAAQC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,OAAQJ,EAAiB,EAAjBA,WAClD,OACE,oCACE,kBAACF,EAAD,CAAWE,WAAYA,EAAYK,SAAUH,GAC3C,kBAACT,EAAD,CAAaa,KAAK,OAAOH,MAAOA,EAAOI,YAAY,aAAaC,SAAUJ,IAC1E,kBAACR,EAAD,KACC,kBAAC,IAAD,U,0bCvBT,IAAMa,EAAWf,IAAOgB,GAAV,KAUH,qBAAGC,UAA6B,EAAI,KAC7C,qBAAGC,WACM,4KAUA5B,EAAOI,OAVP,mDAaAJ,EAAOK,OAbP,mDAgBAL,EAAOM,QAhBP,mDAmBAN,EAAOO,QAnBP,0CAwBT,qBAAGS,YACO,2DAQNa,EAAiBnB,IAAOoB,IAAV,KAwCLC,E,4MA9BbC,MAAQ,CACNb,MAAO,GACPc,YAAa,KACbC,OAAO,G,EAGTC,kBAAoB,SAAAC,GAClB,EAAKC,SAAS,CACZlB,MAAOiB,EAAEE,OAAOnB,S,uDAGX,IAAD,EACgCoB,KAAKP,MAA5BC,GADT,EACEd,MADF,EACSc,aAAaC,EADtB,EACsBA,MAC5B,OACE,oCACA,kBAACT,EAAD,oBACA,kBAACI,EAAD,KACE,kBAACJ,EAAD,oBAGA,kBAAC,EAAD,CACET,YAAaiB,GAAeC,KAAU,EACtCd,OAAQmB,KAAKJ,0B,GAvBLK,aC/CEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAvB,GACLwB,QAAQxB,MAAMA,EAAMyB,c","file":"static/js/main.241d2b79.chunk.js","sourcesContent":["const size = {\r\n    mobileS: '320px',\r\n    mobileM: '375px',\r\n    mobileL: '525px',\r\n    tablet: '768px',\r\n    laptop: '1024px',\r\n    laptopL: '1440px',\r\n    desktop: '2560px',\r\n  };\r\n  \r\n  const device = {\r\n    mobileS: `(min-width: ${size.mobileS})`,\r\n    mobileM: `(min-width: ${size.mobileM})`,\r\n    mobileL: `(min-width: ${size.mobileL})`,\r\n    tablet: `(min-width: ${size.tablet})`,\r\n    laptop: `(min-width: ${size.laptop})`,\r\n    laptopL: `(min-width: ${size.laptopL})`,\r\n    desktop: `(min-width: ${size.desktop})`,\r\n    desktopL: `(min-width: ${size.desktop})`,\r\n  };\r\n  \r\n  export default device;","import device from '../../responsive';\r\nimport styled from 'styled-components';\r\n\r\n\r\nexport const SearchInput = styled.input`\r\n  width: 100%;\r\n  border: none;\r\n  background-color: #ffffff;\r\n  font-size: 16px;\r\n  padding: 10px 15px 10px 40px;\r\n  color: #c5c5c5;\r\n  transition: 0.2s;\r\n  border-radius: 20px;\r\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\r\n  &:focus {\r\n    color: #191919;\r\n    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\r\n    outline: none;\r\n  }\r\n  @media ${device.tablet} {\r\n    font-size: 18px;\r\n  }\r\n  @media ${device.laptop} {\r\n    padding: 15px 20px 15px 45px;\r\n    border-radius: 30px;\r\n  }\r\n`;\r\n\r\nexport const SearchIcon = styled.span`\r\n  display: block;\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 22px;\r\n  transform: translate(-50%, -50%);\r\n  height: 14px;\r\n  width: 14px;\r\n  font-size: 14px;\r\n  color: #c5c5c5;\r\n  @media ${device.tablet} {\r\n    height: 15px;\r\n    width: 15px;\r\n    font-size: 15px;\r\n  }\r\n  @media ${device.laptop} {\r\n    height: 16px;\r\n    width: 16px;\r\n    font-size: 16px;\r\n  }\r\n`;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport * as Icon from 'react-feather';\r\nimport {SearchInput,SearchIcon} from './Search.style';\r\nimport device from '../../responsive';\r\n\r\nconst SearchBar = styled.form`\r\n  top: ${({ showResult }) => (showResult ? '0%' : '30%')};\r\n  position: relative;\r\n  margin: 0 auto;\r\n  max-width: 500px;\r\n  transition: 0.8s 0.5s;\r\n  @media ${device.laptopL} {\r\n    max-width: 600px;\r\n  }\r\n  @media ${device.desktop} {\r\n    max-width: 700px;\r\n  }\r\n`;\r\n\r\n\r\nexport const SearchCity = ({ submit, value, change, showResult }) => {\r\n  return (\r\n    <>\r\n      <SearchBar showResult={showResult} onSubmit={submit}>\r\n        <SearchInput type=\"text\" value={value} placeholder=\"Enter city\" onChange={change} />\r\n        <SearchIcon>\r\n         <Icon.Search/>\r\n        </SearchIcon>\r\n      </SearchBar>\r\n    </>\r\n  );\r\n};\r\n\r\nSearchCity.propTypes = {\r\n  submit: PropTypes.func.isRequired,\r\n  value: PropTypes.string.isRequired,\r\n  change: PropTypes.func.isRequired,\r\n  showResult: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default SearchCity;","import React ,{Component} from 'react';\nimport styled from 'styled-components';\nimport SearchCity from './components/SearchCity';\nimport device from './responsive';\nimport './App.css';\nconst AppTitle = styled.h1`\ndisplay: block;\nheight: 64px;\nmargin: 0;\npadding: 20px 0;\nfont-size: 20px;\ntext-transform: uppercase;\nfont-weight: 400;\ncolor: #ffffff;\ntransition: 0.3s 1.4s;\nopacity: ${({ showLabel }) => (showLabel ? 1 : 0)};\n${({ secondary }) =>\n  secondary &&\n  `\n  opacity: 1;\n  height: auto;\n  position: relative;\n  padding: 20px 0;\n  font-size: 30px;\n  top: 20%;\n  text-align: center;\n  transition: .5s;\n  @media ${device.tablet} {\n    font-size: 40px;\n  }\n  @media ${device.laptop} {\n    font-size: 50px;\n  }\n  @media ${device.laptopL} {\n    font-size: 60px;\n  }\n  @media ${device.desktop} {\n    font-size: 70px;\n  }\n  \n`}\n${({ showResult }) =>\n  showResult &&\n  `\n  opacity: 0;\n  visibility: hidden;\n  top: 10%;\n`}\n`;\n\nconst WeatherWrapper = styled.div`\nmax-width: 1500px;\nmargin: 0 auto;\nheight: calc(100vh - 64px);\nwidth: 100%;\nposition: relative;\n`;\n\n\nclass App extends Component{\n  state = {\n    value: '',\n    weatherInfo: null,\n    error: false,\n  };\n\n  handleInputChange = e => {\n    this.setState({\n      value: e.target.value,\n    });\n  };\n  render(){\n    const { value, weatherInfo, error } = this.state;\n    return(\n      <>\n      <AppTitle>Weather app</AppTitle>\n      <WeatherWrapper>\n        <AppTitle>\n          Weather app\n        </AppTitle>\n        <SearchCity\n          showResult={(weatherInfo || error) && true}\n          change={this.handleInputChange}\n        />\n      </WeatherWrapper>\n    </>\n        );\n      }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}